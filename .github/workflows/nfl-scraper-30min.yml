name: üèà NFL Fantasy Scraper 24/7 - Cada 30 Minutos

on:
  schedule:
    # Ejecutar cada 30 minutos, las 24 horas del d√≠a
    - cron: '0,30 * * * *'  # En los minutos 0 y 30 de cada hora
  
  # Permitir ejecuci√≥n manual desde GitHub UI
  workflow_dispatch:
    inputs:
      force_test_mode:
        description: 'Ejecutar en modo de prueba (no insertar√° datos)'
        required: false
        default: false
        type: boolean
      test_week_detection:
        description: 'Probar solo detecci√≥n de semana NFL'
        required: false
        default: false
        type: boolean

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
  GITHUB_ACTIONS: true
  PYTHONPATH: ${{ github.workspace }}
  TZ: 'UTC'

jobs:
  nfl-scraping-24x7:
    runs-on: ubuntu-latest
    timeout-minutes: 25  # Timeout antes de la siguiente ejecuci√≥n
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üêç Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: üåê Install Chrome & dependencies (optimized)
      run: |
        # Sistema base
        sudo apt-get update -qq
        
        # Chrome en una sola l√≠nea (m√°s r√°pido)
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add - && \
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list' && \
        sudo apt-get update -qq && \
        sudo apt-get install -y google-chrome-stable
        
        # Verificar instalaci√≥n
        google-chrome --version
        
    - name: üìö Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install selenium==4.15.2 beautifulsoup4==4.12.2 supabase==1.2.0 python-dotenv==1.0.0
        
    - name: üß™ Test Week Detection (if requested)
      if: ${{ github.event.inputs.test_week_detection == 'true' }}
      run: |
        echo "üß™ MODO PRUEBA: Detecci√≥n de semana NFL"
        python scrapper.py --test-week
        
    - name: üß™ Full Test Mode (if requested)
      if: ${{ github.event.inputs.force_test_mode == 'true' }}
      run: |
        echo "üß™ MODO PRUEBA COMPLETO - No se insertar√°n datos"
        echo "üîç 1. Prueba de detecci√≥n de semana..."
        python scrapper.py --test-week
        echo ""
        echo "üîç 2. Prueba de comparaci√≥n individual..."
        python scrapper.py --test-individual
        echo ""
        echo "üîç 3. Prueba general del sistema..."
        python scrapper.py --test
        
    - name: üèà Run NFL Fantasy Scraper (PRODUCTION MODE)
      if: ${{ github.event.inputs.force_test_mode != 'true' && github.event.inputs.test_week_detection != 'true' }}
      run: |
        echo "üèà ===== NFL FANTASY SCRAPER 24/7 ====="
        echo "‚è∞ Inicio: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo "üåç Timezone: UTC"
        echo "üîí Modo: AUTOM√ÅTICO (m√°ximas protecciones anti-duplicados)"
        echo "üß† Sistema: Detecci√≥n de cambios + semanas NFL autom√°ticas"
        echo "üï∑Ô∏è Frecuencia: Cada 30 minutos, 24/7"
        echo "========================================"
        
        # Ejecutar en modo autom√°tico con todas las protecciones
        python scrapper.py --auto
        
        SCRIPT_EXIT_CODE=$?
        
        echo "========================================"
        if [ $SCRIPT_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ Ejecuci√≥n completada exitosamente: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üîÑ Pr√≥xima ejecuci√≥n autom√°tica: en 30 minutos"
          echo "üìä Sistema anti-duplicados: OPERATIVO"
        else
          echo "‚ùå Error en la ejecuci√≥n (c√≥digo: $SCRIPT_EXIT_CODE)"
          echo "üîÑ Sistema reintentar√° autom√°ticamente en 30 minutos"
        fi
        echo "========================================"
        
        # Propagar el c√≥digo de salida
        exit $SCRIPT_EXIT_CODE
        
    - name: üìä Log execution summary
      if: always()
      run: |
        echo ""
        echo "üìà RESUMEN DE EJECUCI√ìN 24/7:"
        echo "  üîß Workflow: nfl-scraper-30min"
        echo "  ‚è∞ Frecuencia: Cada 30 minutos (48 ejecuciones/d√≠a)"
        echo "  ü§ñ Modo: Autom√°tico con detecci√≥n inteligente"
        echo "  üîí Anti-duplicados: Activado (comparaci√≥n individual por jugador)"
        echo "  üèà Detecci√≥n de semana: Autom√°tica (web + fecha fallback)"
        echo "  ‚ö° Timeout: 25 minutos m√°ximo por ejecuci√≥n"
        echo "  üåê Horario: 24 horas al d√≠a, 7 d√≠as a la semana"
        echo "  üìÖ Pr√≥xima: $(date -d '+30 minutes' '+%Y-%m-%d %H:%M UTC' 2>/dev/null || echo 'En 30 minutos')"
        echo ""
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Status: √âXITO - Sistema funcionando correctamente"
        else
          echo "‚ö†Ô∏è Status: ERROR - Ver logs para detalles"
        fi
        
    - name: üö® Error notification & recovery
      if: failure()
      run: |
        echo ""
        echo "üö® ========= ERROR EN SCRAPING NFL ========="
        echo "‚è∞ Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo "üîç Revisar logs de pasos anteriores para detalles"
        echo "ÔøΩ RECUPERACI√ìN AUTOM√ÅTICA:"
        echo "  ‚Ä¢ El sistema reintentar√° autom√°ticamente en 30 minutos"
        echo "  ‚Ä¢ No se requiere intervenci√≥n manual"
        echo "  ‚Ä¢ GitHub Actions continuar√° ejecut√°ndose 24/7"
        echo "üõ†Ô∏è Si los errores persisten, revisar:"
        echo "  ‚Ä¢ Configuraci√≥n de secrets (SUPABASE_URL, SUPABASE_KEY)"
        echo "  ‚Ä¢ Estado de fantasy.nfl.com"
        echo "  ‚Ä¢ Logs detallados en GitHub Actions"
        echo "========================================"
