#!/usr/bin/env python3
"""
An√°lisis de expresiones cron para GitHub Actions
Explica la diferencia entre '0,30 * * * *' y '*/30 * * * *'
"""

def explicar_cron_expressions():
    print("üïê AN√ÅLISIS DE EXPRESIONES CRON")
    print("=" * 50)
    
    print("\n‚ùå EXPRESI√ìN ANTERIOR (PROBLEM√ÅTICA):")
    print("   cron: '0,30 * * * *'")
    print("   üìù Significado: Ejecutar en minuto 0 Y minuto 30 de cada hora")
    print("   ‚è∞ Ejecuciones:")
    print("      ‚Ä¢ 00:00, 00:30")
    print("      ‚Ä¢ 01:00, 01:30") 
    print("      ‚Ä¢ 02:00, 02:30")
    print("      ‚Ä¢ ... etc")
    print("   üìä Total: 48 ejecuciones/d√≠a (2 por hora)")
    print("   üö® PROBLEMA: GitHub puede ejecutar solo UNA por hora")
    print("   üìà RESULTADO: Ejecuta solo en :00 o solo en :30 (cada hora)")
    
    print("\n‚úÖ EXPRESI√ìN NUEVA (CORREGIDA):")
    print("   cron: '*/30 * * * *'")
    print("   üìù Significado: Ejecutar CADA 30 minutos")
    print("   ‚è∞ Ejecuciones:")
    print("      ‚Ä¢ 00:00, 00:30")
    print("      ‚Ä¢ 01:00, 01:30")
    print("      ‚Ä¢ 02:00, 02:30") 
    print("      ‚Ä¢ ... etc")
    print("   üìä Total: 48 ejecuciones/d√≠a (cada 30 minutos exactamente)")
    print("   ‚úÖ RESULTADO: Ejecuci√≥n garantizada cada 30 minutos")
    
    print("\nüîß DIFERENCIA T√âCNICA:")
    print("   ‚Ä¢ '0,30 * * * *' = Lista de minutos espec√≠ficos")
    print("   ‚Ä¢ '*/30 * * * *'  = Intervalo de 30 minutos")
    print("   ‚Ä¢ GitHub Actions prefiere intervalos sobre listas")
    
    print("\nüìÖ PR√ìXIMAS EJECUCIONES ESPERADAS:")
    from datetime import datetime, timedelta
    
    now = datetime.now()
    print(f"   üïê Ahora: {now.strftime('%H:%M:%S')}")
    
    # Calcular pr√≥xima ejecuci√≥n en m√∫ltiplo de 30 minutos
    minutes = now.minute
    next_30 = ((minutes // 30) + 1) * 30
    
    if next_30 >= 60:
        next_time = now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1)
    else:
        next_time = now.replace(minute=next_30, second=0, microsecond=0)
    
    for i in range(5):
        exec_time = next_time + timedelta(minutes=30*i)
        print(f"   ‚Ä¢ {exec_time.strftime('%H:%M')} (en {30*i + (next_time - now).total_seconds()//60:.0f} min)")
    
    print("\nüöÄ ACCIONES REQUERIDAS:")
    print("   1. ‚úÖ Cambio aplicado al workflow")
    print("   2. üì§ Hacer commit y push del cambio")
    print("   3. üñ±Ô∏è Ejecutar manualmente UNA VEZ desde GitHub")
    print("   4. ‚è∞ Verificar que funcione cada 30 minutos")

if __name__ == "__main__":
    explicar_cron_expressions()
